from typing import (
    Iterator,
    List,
    Optional,
    Tuple,
    Union,
)

from py import io as py_io  # type: ignore

from interrogate.config import InterrogateConfig
from interrogate.visit import CovNode


class BaseInterrogateResult:
    total: int
    covered: int
    missing: int

    @property
    def perc_covered(self) -> float: ...


class InterrogateFileResult:
    filename: str
    ignore_module: bool
    nodes: Iterator[CovNode]

    def combine(self) -> None: ...


class InterrogateResults:
    ret_code: int
    file_results: Iterator[InterrogateFileResult]

    def combine(self) -> None: ...


class InterrogateCoverage:
    COMMON_EXCLUDE: List[str]
    def __init__(self, paths: Tuple[str], conf: Optional[InterrogateConfig] = ..., excluded: Optional[Tuple[str]] = ...) -> None: ...
    def _add_common_exclude(self) -> None: ...
    def _filter_files(self, files: Iterator[str]) -> Iterator[str]: ...
    def get_filenames_from_paths(self) -> List[str]: ...
    def _filter_nodes(self, nodes: List[CovNode]) -> List[CovNode]: ...
    def _get_file_coverage(self, filename: str) -> InterrogateFileResult: ...
    def _get_coverage(self, filenames: List[str]) -> InterrogateResults: ...
    def get_coverage(self) -> InterrogateResults: ...
    def _get_filename(self, filename: str) -> str: ...
    def _get_detailed_row(self, node: CovNode, filename: str) -> List[str]: ...
    def _create_detailed_table(self, combined_results: InterrogateResults) -> List[List[str]]: ...
    def _print_detailed_table(self, results: InterrogateResults, tw: py_io.TerminalWriter) -> None: ...
    def _create_summary_table(self, combined_results: InterrogateResults) -> List[List[str]]: ...
    def _print_summary_table(self, results: InterrogateResults, tw: py_io.TerminalWriter) -> None: ...
    @staticmethod
    def _sort_results(results: InterrogateResults) -> InterrogateResults: ...
    def print_results(self, results: InterrogateResults, output: Optional[str], verbosity: int) -> None: ...
