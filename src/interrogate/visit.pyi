from _ast import (
    AsyncFunctionDef,
    ClassDef,
    FunctionDef,
    Module,
)
from typing import Union

from interrogate.config import InterrogateConfig


class CovNode:
    name: str
    path: str
    level: int
    lineno: int
    covered: bool
    node_type: str


class CoverageVisitor:
    def __init__(self, filename: str, config: InterrogateConfig) -> None: ...
    @staticmethod
    def _has_doc(node: Union[FunctionDef, AsyncFunctionDef, ClassDef, Module]) -> bool: ...
    def _is_class_ignored(self, node: ClassDef) -> bool: ...
    def _is_func_ignored(self, node: Union[FunctionDef, AsyncFunctionDef]) -> bool: ...
    def _is_ignored_common(self, node: Union[FunctionDef, AsyncFunctionDef, ClassDef]) -> bool: ...
    def _is_private(self, node: Union[FunctionDef, AsyncFunctionDef, ClassDef]) -> bool: ...
    def _is_semiprivate(self, node: Union[FunctionDef, AsyncFunctionDef, ClassDef]) -> bool: ...
    def _visit_helper(self, node: Union[FunctionDef, AsyncFunctionDef, ClassDef, Module]) -> None: ...
    def visit_AsyncFunctionDef(self, node: AsyncFunctionDef) -> None: ...
    def visit_ClassDef(self, node: ClassDef) -> None: ...
    def visit_FunctionDef(self, node: FunctionDef) -> None: ...
    def visit_Module(self, node: Module) -> None: ...
